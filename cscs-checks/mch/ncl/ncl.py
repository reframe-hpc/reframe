# This check was created based on the test job received from Andre Walser (see
# ticket #30293) and based on the NCL test from the old regression:
# https://madra.cscs.ch/eth-cscs/regression/blob/master/tests/
# 8800_ncl_checknode_kesch.sh
# https://madra.cscs.ch/eth-cscs/regression/tree/master/src/
# 8800_ncl_checknode_kesch

import os
import reframe.utility.sanity as sn

from reframe.core.pipeline import RunOnlyRegressionTest


class NCLBaseCheck(RunOnlyRegressionTest):
    def __init__(self, check_name, **kwargs):
        super().__init__('NCL_' + check_name + '_check',
                         os.path.dirname(__file__), **kwargs)
        self.sourcesdir = os.path.join(self.current_system.resourcesdir, 'NCL')
        self.check_name = check_name
        self.descr = 'CDL check for MCH: ' + self.check_name
        self.valid_systems = ['kesch:pn']
        self.valid_prog_environs = ['PrgEnv-gnu']
        self.maintainers = ['SO', 'VK']
        self.tags = {'production'}
        self.modules = ['ncl/6.2.1', 'imagemagick/6.7.6-5']
        self.executable = 'ncl'
        self.executable_opts = [self.check_name + '.ncl']
        self.variables = {
            'NCL_COSMOLIB'            : './cosmolib',
            'NCL_NO_SYSTEM_PAGER'     : '1',
            'NCL_GRIB_PTABLE_PATH'    : '${NCL_COSMOLIB}/gt',
            'NCARG_RANGS'             : '${NCL_COSMOLIB}/data/rangs_gshhs',
            'NCL_COSMOLIB_COLORTABLES': '${NCL_COSMOLIB}/ct',
            'NCL_DEF_SCRIPTS_DIR'     : '${NCL_COSMOLIB}/startup'
        }

        # The sanity check depends on the output generated by the post_run
        # commands, notably by the bash script data_analysis.sh (see below in
        # function setup)
        self.sanity_patterns = sn.all([
            sn.assert_found(r'CL_INFO : NCL script successfully completed',
                            self.stdout),
            sn.assert_not_found(r'^' + self.check_name + '.png: '
                                r'metadata difference:[^\n]*\w+', self.stdout),
            sn.assert_found(r'^' + self.check_name + '.png: '
                            r'number of different pixels: 0\D', self.stdout),
            sn.assert_not_found(r'^' + self.check_name + '.pdf: '
                                r'metadata difference:[^\n]*\w+', self.stdout),
            sn.assert_found(r'^' + self.check_name + '.pdf: '
                            r'number of different pixels: 0\D', self.stdout),
            sn.assert_not_found(r'.+', self.stderr)
        ])

        # Performance measurement
        pattern = r'TIMESTAMP:\s+(?P<stamp>\S+)'
        start_time = sn.extractsingle(pattern, self.stdout, 'stamp', float, 0)
        end_time   = sn.extractsingle(pattern, self.stdout, 'stamp', float, 1)
        self.perf_patterns = {
            'runtime': end_time - start_time
        }

    def setup(self, partition, environ, **job_opts):
        super().setup(partition, environ, **job_opts)
        print_timestamp = (
            "python3 -c \"from datetime import datetime; "
            "print('TIMESTAMP: ', datetime.today().strftime('%s.%f'), "
            "flush=True)\"")
        self.job.pre_run  = [print_timestamp]
        self.job.post_run = [
            print_timestamp,
            'printf "\n---------------------------------------------------\n"',
            'printf "ANALYSIS OF THE PRODUCED DATA\n"',
            './data_analysis.sh ' + self.check_name + '.png',
            './data_analysis.sh ' + self.check_name + '.pdf'
        ]


class C1_ch_VIS_000_check(NCLBaseCheck):
    def __init__(self, **kwargs):
        super().__init__('c1_ch_VIS_000', **kwargs)

        # Measured values where between 6.65 and 7.01 (5 samples)
        self.reference = {
            'kesch:pn': {
                'runtime': (6.7, -0.5, 0.5),
            }
        }


class C7_eu_CAT_DTI_V_003_check(NCLBaseCheck):
    def __init__(self, **kwargs):
        super().__init__('c7_eu_CAT_DTI_V_003', **kwargs)

        # Measured values where between 3.0 and 3.5 (5 samples)
        self.reference = {
            'kesch:pn': {
                'runtime': (3.0, -0.5, 0.5),
            }
        }


def _get_checks(**kwargs):
    return [
        C1_ch_VIS_000_check(**kwargs),
        C7_eu_CAT_DTI_V_003_check(**kwargs)
    ]
